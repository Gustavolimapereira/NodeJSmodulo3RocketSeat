Passo a passo - modulo 3

npm init -y 

criar pasta src, novo arquivo server.ts e o app.ts

criar o arquivo .npmrc e configurar o arquivo - save-exact=true

instalar dependencias - npm i typescript @types/node tsx tsup -D
após a instalação executar o comando - npx tsc --init e alterar o arquivo tsconfig.json para "target: es2020"

instalar o fastify - npm i fastify

criar o arquivo gitignore e ignorar as pastas node_modules e build e o .env

configurar o script do package.json (para rodar o start precisa antes dar o build)
"dev": "tsx watch src/server.ts",
"start": "node build/server.js",
"build": "tsup src --out-dir build"

-------------------------------------
configuração inicial do server.ts
import {app} from './app'

app.listen({
    host: '0.0.0.0',
    port: 3333,
}).then(() => {
    console.log('HTTP Server Running!')
})

configuração inicial do app.ts
import fastify from 'fastify'

export const app = fastify()

----------------CONFIGURAÇÃO DE VARIAVEIS DE AMBIENTE---------------------
criar o arquivo .env e outro arquivo chamado .env.example

NODE_ENV=dev

instalar as bibliotecas - npm i dotenv e npm i zod (npm install dotenv zod)

criar pasta env dentro de src e criar o arquivo index.ts

---------------CONFIGURAÇÃO DO ESLINT-------------------------------------
instalação do eslint - npm i eslint @rocketseat/eslint-config -D
criar arquivo .eslintignore e adcionar as pastas - node_modules e  build
criar arquivo .eslintrc.json e colocar o codigo abaixo no arquivo
{
  "extends": ["@rocketseat/eslint-config/node"],
  "plugins": ["prettier"],
  "rules": {
    "prettier/prettier": [
      "error",
      {
        "endOfLine": "auto"
      }
    ]
  }
}

-----------------AJUSTAR IMPORTAÇÃO DAS PASTAS----------------------------
ir no arquivo tsconfig.json e descomentar a opção "baseUrl": "./" e a opção "paths": {"@/*": ["./src/*"]}

-----------------BANCO DE DADOS--------------------------
instalar a extensão do prisma no vscode
apertar f1 e digitar json, incluir o codigo abaixo
"[prisma]":{
        "editor.formatOnSave": true
    },

instalar as bibliotecas - npm i prisma -D // rodar o comando -> npx prisma init, para iniciar a parte de banco de dados
sera criada uma pasta prisma e um arquivo schema.prisma, nela sera configurado as models(tabelas)

npm install @prisma/client para continuar o procedimento abaixo

executar o comando -> npx prisma generate // ele vai criar de forma automatica a tipagem do schema

para testar o codigo ate esse ponto, no arquivo app.ts é possivel realizar o teste abaixo:

*
import fastify from "fastify";
import { PrismaClient } from "@prisma/client";

export const app = fastify();

const prisma = new PrismaClient();

prisma.user.create({
  data: {
    name: "Gustavo Lima",
    email: "gu.lim@hotmail.com",
  },
});
*

---------------INICIANDO COM O DOCKER--------------
com o docker instalado vamos rodar o comando para criar o banco de dados
docker run --name NodeJSmodulo3RocketSeat-pg -e POSTGRESQL_USERNAME=docker -e POSTGRESQL_PASSWORD=docker -e POSTGRESQL_DATABASE=rocketseatModulo3 -p 5432:5432 bitnami/postgresql

comando para criar um container no trabalho utilizando outra porta
docker run --name NodeJSmodulo3RocketSeat-pg -e POSTGRESQL_USERNAME=docker -e POSTGRESQL_PASSWORD=docker -e POSTGRESQL_DATABASE=rocketseatModulo3 -p 5433:5432 bitnami/postgresql

alterar usuario e senha no arquivo .ENV

npx prisma migrate dev // comando que vai no arquivo schema.prisma e verifica qual tabela não existe no banco de dados e cria
descrever oque foi feito ao rodar o comando acima

ao rodar o comando acima a pasta migrations e arquivos deveram ser criados

npx prisma studio - vai abrir o banco de dados no navegador

docker ps - comando para ver os containers que estão rodando
docket ps -a - comando para ver os containers que eu ja rodei
ctrl + C - comando para parar o docker // docker stop + id ou nome
docker start nome do banco - comando para iniciar o container
docker rm nome do banco - comando para deletar o container

--docker compose
é um metodo para manter o banco de dados atualizado entre os desenvolvedores

criar arquivo docker-compose.yml configurar o arquivo 
** e rodar o comando - docker compose up -d // executar o cmd como admin npx prisma migrate dev // npx prisma generate // docker compose up -d
docker compose stop - comando para parar o container
docker compose up -d - caso o container ja tenha sido criado ao rodar esse comando novamente ele vai só iniciar o container após o stop

---------------------EXEMPLO DE ROTA PARA INSERÇÃO DE DADOS NO BD----------------
rota inserido no app.ts

app.post("/users", async (request, reply) => {
  const registerBodySchema = z.object({
    name: z.string(),
    email: z.string().email(),
    password: z.string().min(6),
  });

  const { name, email, password } = registerBodySchema.parse(request.body);

  await prisma.user.create({
    data: {
      name,
      email,
      password_hash: password,
    },
  });

  return reply.status(201).send();
});

-----------------------HASH E VALIDAÇÃO-----------------------
instalar nova biblioteca 
npm i bcryptjs // npm i -D @types/bcryptjs


-----------------------TESTES-----------------------
instalar a biblioteca do vitest

npm i vitest vite-tsconfig-paths -D
criar aquivo na raiz do projeto - vite.config.ts configura-lo

criar script no package.json
"test": "vitest run",
"test:watch": "vitest",
"test:coverage": "vitest run --coverage"

-------------------JWT----------------------
npm i @fastify/jwt


-----------------ENVIRONMENT BD------------------
criar a pasta vitest-environment-prisma
acessar a pasta e rodar o comando npm init -y
acessar o package.json apagar os scripts e renomear o main
para o nome do arquivo que vai ser criado entro dessa pasta.  
rodar o comando npm link dentro dessa pasta
voltar a raiz do projeto e rodar o comando npm link + o nome da pasta criada

instalar o pacote // npm install -D npm-run-all
ajustar o package.json

instalar a biblioteca npm i supertest -D para criar os testes e2e
npm i @types/supertest -D


